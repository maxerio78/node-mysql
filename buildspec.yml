version: 0.2

env:
  variables:
    CLUSTER_NAME: "cluster-k8s-devops"
    AWS_REGION: "us-east-1"
    IMAGE_REPO_NAME: "node-mysql"
    IMAGE_TAG: "latest"
    ACCOUNT_ID: "399423262543"
    K8S_NAMESPACE: "default"
    DEPLOYMENT_FILE: "k8s/deployment.yaml"
    SERVICE_FILE: "k8s/service.yaml"
    EKS_RELEASE_DATE: "2025-01-17"

phases:
  install:
    runtime-versions:
      nodejs: 18
    commands:
      - echo "Checking versions..."
      - node -v
      - npm -v
      - aws --version
      - echo "Installing kubectl (try EKS S3, fallback to upstream dl.k8s.io)..."
      - 'K8S_VER=$(aws eks describe-cluster --name $CLUSTER_NAME --region $AWS_REGION --query "cluster.version" --output text)'
      - 'EKS_DATE=${EKS_RELEASE_DATE}'
      - 'KUBE_URL_AWS="https://s3.us-west-2.amazonaws.com/amazon-eks/${K8S_VER}/${EKS_DATE}/bin/linux/amd64/kubectl"'
      - 'KUBE_URL_UP="https://dl.k8s.io/release/v${K8S_VER}.0/bin/linux/amd64/kubectl"'
      - 'echo "Trying: ${KUBE_URL_AWS}"'
      - 'if curl -sIf "${KUBE_URL_AWS}" > /dev/null; then echo "Downloading from EKS S3..."; curl -fL -o /usr/local/bin/kubectl "${KUBE_URL_AWS}"; else echo "EKS S3 not found for ${K8S_VER}, fallback to upstream: ${KUBE_URL_UP}"; curl -fL -o /usr/local/bin/kubectl "${KUBE_URL_UP}"; fi'
      - 'chmod +x /usr/local/bin/kubectl'
      - 'file /usr/local/bin/kubectl | grep -qi "ELF 64-bit" || (echo "kubectl download looks invalid"; head -n 2 /usr/local/bin/kubectl; exit 1)'
      - 'kubectl version --client --output=yaml || (echo "kubectl not working"; exit 1)'

  pre_build:
    commands:
      - echo "Installing Node.js dependencies..."
      - npm install
      - echo "Logging in to Amazon ECR..."
      - "aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
      - echo "Building Docker image..."
      - "docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG ."
      - "docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG"

  build:
    commands:
      - echo "Pushing Docker image to ECR..."
      - "docker push $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG"

  post_build:
    commands:
      - echo "Updating kubeconfig for EKS..."
      - aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION
      - echo "Deploying to Kubernetes namespace: ${K8S_NAMESPACE}"
      - bash -ec 'if kubectl get deployment node-mysql-deployment -n ${K8S_NAMESPACE} >/dev/null 2>&1; then echo "Deployment found. Updating image..."; CONTAINER_NAME=$(kubectl get deployment node-mysql-deployment -n ${K8S_NAMESPACE} -o jsonpath="{.spec.template.spec.containers[0].name}"); echo "Detected container name: ${CONTAINER_NAME}"; if [ -z "${CONTAINER_NAME}" ]; then echo "No container name found in deployment spec"; exit 1; fi; kubectl set image deployment/node-mysql-deployment ${CONTAINER_NAME}=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG -n ${K8S_NAMESPACE} --record; else echo "Deployment not found. Applying manifests..."; if [ ! -f "$DEPLOYMENT_FILE" ]; then echo "Deployment file $DEPLOYMENT_FILE not found"; exit 1; fi; kubectl apply -f "$DEPLOYMENT_FILE" -n ${K8S_NAMESPACE}; if [ -f "$SERVICE_FILE" ]; then kubectl apply -f "$SERVICE_FILE" -n ${K8S_NAMESPACE}; fi; fi'
      - echo "Verifying rollout..."
      - kubectl rollout status deployment/node-mysql-deployment -n ${K8S_NAMESPACE}
