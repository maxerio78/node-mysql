version: 0.2

env:
  variables:
    CLUSTER_NAME: "cluster-k8s-devops"        # ชื่อ EKS cluster
    AWS_REGION: "us-east-1"                   # Region ที่ใช้
    IMAGE_REPO_NAME: "node-mysql"             # ชื่อ ECR repository
    IMAGE_TAG: "latest"                       # หรือใช้ commit hash: CODEBUILD_RESOLVED_SOURCE_VERSION
    ACCOUNT_ID: "399423262543"                # AWS Account ID
    K8S_NAMESPACE: "default"                  # Namespace ใน Kubernetes
    DEPLOYMENT_FILE: "k8s/deployment.yaml"    # ไฟล์ manifests ของ Deployment
    SERVICE_FILE: "k8s/service.yaml"          # (ถ้ามี) ไฟล์ Service
    K8S_VERSION: "1.29.6"                     # ปักเวอร์ชัน kubectl ให้ตรงกับ EKS ของคุณ
    KUBECTL_RELEASE_DATE: "2025-01-17"        # วันที่ release ตาม AWS docs

phases:
  install:
    runtime-versions:
      nodejs: 18
    commands:
      - set -euo pipefail
      - echo "Checking versions..."
      - node -v
      - npm -v
      - aws --version
      - echo "Installing kubectl ${K8S_VERSION} (${KUBECTL_RELEASE_DATE}) ..."
      - curl -Lo /usr/local/bin/kubectl "https://s3.us-west-2.amazonaws.com/amazon-eks/${K8S_VERSION}/${KUBECTL_RELEASE_DATE}/bin/linux/amd64/kubectl"
      - chmod +x /usr/local/bin/kubectl
      - kubectl version --client --output=yaml || true

  pre_build:
    commands:
      - echo "Installing Node.js dependencies..."
      - npm install
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
      - echo "Building Docker image..."
      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG

  build:
    commands:
      - echo "Pushing Docker image to ECR..."
      - docker push $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG

  post_build:
    commands:
      - echo "Updating kubeconfig for EKS..."
      - aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION
      - echo "Deploying to Kubernetes namespace: ${K8S_NAMESPACE}"
      - |
        if kubectl get deployment node-mysql-deployment -n ${K8S_NAMESPACE} >/dev/null 2>&1; then
          echo "Deployment found. Updating image..."
          CONTAINER_NAME=$(kubectl get deployment node-mysql-deployment -n ${K8S_NAMESPACE} -o jsonpath='{.spec.template.spec.containers[0].name}')
          echo "Detected container name: $CONTAINER_NAME"
          if [ -z "$CONTAINER_NAME" ]; then
            echo "❌ No container name found in deployment spec"
            exit 1
          fi
          kubectl set image deployment/node-mysql-deployment ${CONTAINER_NAME}=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG -n ${K8S_NAMESPACE} --record
        else
          echo "Deployment not found. Applying manifests..."
          if [ ! -f "$DEPLOYMENT_FILE" ]; then
            echo "❌ Deployment file $DEPLOYMENT_FILE not found"
            exit 1
          fi
          kubectl apply -f $DEPLOYMENT_FILE -n ${K8S_NAMESPACE}
          if [ -f "$SERVICE_FILE" ]; then
            kubectl apply -f $SERVICE_FILE -n ${K8S_NAMESPACE}
          fi
        fi
      - echo "Verifying rollout..."
      - kubectl rollout status deployment/node-mysql-deployment -n ${K8S_NAMESPACE}
artifacts:
  files:
    - '**/*'
